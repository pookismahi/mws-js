// Generated by CoffeeScript 2.0.2
(function() {
  var AmazonMwsRequest, _;

  _ = require('underscore');

  /*
  Constructor for general MWS request objects, wrapped by api submodules to keep
  things DRY, yet familiar despite whichever api is being implemented.

  @param {Object} options Settings to apply to new request instance.
  */
  module.exports = AmazonMwsRequest = class AmazonMwsRequest {
    constructor(options) {
      this.api = {
        path: options.path || "/",
        version: options.version || "2009-01-01",
        legacy: options.legacy || false
      };
      this.action = options.action || "GetServiceStatus";
      this.params = options.params || {};
      if (options.props) {
        this.setMultiple(options.props);
      }
    }

    /*
    Handles the casting, renaming, and setting of individual request params.

    @param {String} param Key of parameter (not ALWAYS the same as the param name!)
    @param {Mixed} value Value to assign to parameter
    @return {Object} Current instance to allow function chaining
    */
    set(param, value) {
      var i, key, p, setValue, v;
      p = this.params[param];
      if (!p) {
        console.log(`Invalid parameter ${param} in MWS request`);
      }
      v = p.value = {};
      
      // Handles the actual setting based on type
      setValue = function(name, val) {
        var results, subKey, subVal;
        switch (p.type) {
          case 'Timestamp':
            return v[name] = val.toISOString();
          case 'Boolean':
            return v[name] = (val ? 'true' : 'false');
          case 'Complex':
            results = [];
            for (subKey in val) {
              subVal = val[subKey];
              results.push(v[`${name}.${subKey}`] = subVal);
            }
            return results;
            break;
          default:
            return v[name] = val;
        }
      };
      
      // Lists need to be sequentially numbered and we take care of that here
      if (p.list) {
        i = 0;
        if ((typeof value === "string") || (typeof value === "number")) {
          setValue(p.name + ".1", value);
        }
        if (typeof value === "object") {
          if (Array.isArray(value)) {
            i = value.length - 1;
            while (i >= 0) {
              setValue(p.name + "." + (i + 1), value[i]);
              i--;
            }
          } else {
            for (key in value) {
              setValue(p.name + "." + (++i), value[key]);
            }
          }
        }
      } else {
        setValue(p.name, value);
      }
      return this;
    }

    setMultiple(conf) {
      _.each(conf, (value, key) => {
        return this.set(key, value);
      });
      return this;
    }

    /*
    Builds a query object and checks for required parameters.

    @return {Object} KvP's of all provided parameters (used by invoke())
    */
    query() {
      var name, param, q, ref, required, type, value;
      q = {};
      ref = this.params;
      for (param in ref) {
        ({name, value, type, required} = ref[param]);
        if (param.required && (value == null)) {
          // console.log "v #{value}\nn #{name}\nr #{required}"
          throw `ERROR: Missing required parameter, ${name}!`;
        }
        _.extend(q, value);
      }
      return q;
    }

  };

}).call(this);
