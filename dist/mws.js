// Generated by CoffeeScript 2.0.2
(function() {
  /*
   * Contructor for objects used to represent enumeration states. Useful
   * when you need to make programmatic updates to an enumerated data type or
   * wish to encapsulate enum states in a handy, re-usable variable.
   * 
   * @param {Array} choices An array of any possible values (choices)
   */
  var EnumType;

  exports.Enum = EnumType = class EnumType {
    constructor(_choices1) {
      var choice;
      this._choices = _choices1;
      for (choice in _choices) {
        this[choices[choice]] = false;
      }
    }

    /*
     * Enable one or more choices (accepts a variable number of arguments)
     * @return {Object} Current instance of EnumType for chaining
     */
    enable() {
      var arg;
      for (arg in arguments) {
        this[arguments[arg]] = true;
      }
      return this;
    }

    /*
     * Disable one or more choices (accepts a variable number of arguments)
     * @return {Object} Current instance of EnumType for chaining
     */
    disable() {
      var arg;
      for (arg in arguments) {
        this[arguments[arg]] = false;
      }
      return this;
    }

    /*
     * Toggles one or more choices (accepts a variable number of arguments)
     * @return {Object} Current instance of EnumType for chaining
     */
    toggle() {
      var arg;
      for (arg in arguments) {
        this[arguments[arg]] = !this[arguments[arg]];
      }
      return this;
    }

    /*
     * Return all possible values without regard to current state
     * @return {Array} Choices passed to EnumType constructor
     */
    all() {
      return this._choices;
    }

    /*
     * Return all enabled choices as an array (used to set list params, usually)
     * @return {Array} Choice values for each choice set to true 
     */
    values() {
      var choice, value;
      value = [];
      for (choice in this._choices) {
        if (this[this._choices[choice]] === true) {
          value.push(this._choices[choice]);
        }
      }
      return value;
    }

  };

  exports.Client = require('./client');

  exports.Request = require('./request');

  exports.Products = require('./products');

  exports.Feeds = require('./feeds');

  exports.Orders = require('./orders');

  exports.Reports = require('./reports');

  exports.FBA = require('./fba');

}).call(this);
