// Generated by CoffeeScript 2.0.2
(function() {
  /*
   * Products API requests and definitions for Amazon's MWS web services.
   * For information on using, please see examples folder.
   * 
   * @author Robert Saunders
   */
  var ProductsRequest, mws;

  mws = require('./mws');

  /*
   * Ojects to represent enum collections used by some request(s)
   * @type {Object}
   */
  exports.enums = {
    ItemConditions: function() {
      return new mws.Enum(['New', 'Used', 'Collectible', 'Refurbished', 'Club']);
    }
  };

  /*
   * Contains brief definitions for unique data type values.
   * Can be used to explain input/output to users via tooltips, for example
   * @type {Object}
   */
  exports.types = {
    CompetitivePriceId: {
      '1': 'New Buy Box Price',
      '2': 'Used Buy Box Price'
    },
    ServiceStatus: {
      'GREEN': 'The service is operating normally.',
      'GREEN_I': 'The service is operating normally + additional info provided',
      'YELLOW': 'The service is experiencing higher than normal error rates or degraded performance.',
      'RED': 'The service is unabailable or experiencing extremely high error rates.'
    }
  };

  /*
   * A collection of currently supported request constructors. Once created and 
   * configured, the returned requests can be passed to an mws client `invoke` call
   * @type {Object}
   */
  exports.requests = {
    GetServiceStatus: function() {
      return new ProductsRequest('GetServiceStatus');
    },
    ListMatchingProducts: function(props) {
      return new ProductsRequest('ListMatchingProducts', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        Query: {
          name: 'Query',
          required: true
        },
        QueryContextId: {
          name: 'QueryContextId'
        }
      });
    },
    GetMatchingProduct: function(props) {
      return new ProductsRequest('GetMatchingProduct', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ASINList: {
          name: 'ASINList.ASIN',
          list: true,
          required: true
        }
      });
    },
    GetMatchingProductForId: function(props) {
      return new ProductsRequest('GetMatchingProductForId', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        IdType: {
          name: 'IdType',
          required: true
        },
        IdList: {
          name: 'IdList.Id',
          list: true,
          required: true
        }
      });
    },
    GetCompetitivePricingForSKU: function(props) {
      return new ProductsRequest('GetCompetitivePricingForSKU', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        SellerSKUList: {
          name: 'SellerSKUList.SellerSKU',
          list: true,
          required: true
        }
      });
    },
    GetCompetitivePricingForASIN: function(props) {
      return new ProductsRequest('GetCompetitivePricingForASIN', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ASINList: {
          name: 'ASINList.ASIN',
          list: true,
          required: true
        }
      });
    },
    GetLowestOfferListingsForSKU: function(props) {
      return new ProductsRequest('GetLowestOfferListingsForSKU', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        SellerSKUList: {
          name: 'SellerSKUList.SellerSKU',
          list: true,
          required: true
        },
        ExcludeMe: {
          name: 'ExcludeMe',
          type: 'Boolean'
        }
      });
    },
    GetLowestOfferListingsForASIN: function(props) {
      return new ProductsRequest('GetLowestOfferListingsForASIN', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        ASINList: {
          name: 'ASINList.ASIN',
          list: true,
          required: true
        }
      });
    },
    GetLowestPricedOffersForSKU: function(props) {
      return new ProductsRequest('GetLowestPricedOffersForSKU', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        SellerSKU: {
          name: 'SellerSKU',
          required: true
        }
      });
    },
    GetLowestPricedOffersForASIN: function(props) {
      return new ProductsRequest('GetLowestPricedOffersForASIN', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        ASIN: {
          name: 'ASIN',
          required: true
        }
      });
    },
    GetMyPriceForSKU: function(props) {
      return new ProductsRequest('GetMyPriceForSKU', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        SellerSKUList: {
          name: 'SellerSKUList.SellerSKU',
          list: true,
          required: true
        }
      });
    },
    GetMyPriceForASIN: function(props) {
      return new ProductsRequest('GetMyPriceForASIN', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ItemCondition: {
          name: 'ItemCondition'
        },
        ASINList: {
          name: 'ASINList.ASIN',
          list: true,
          required: true
        }
      });
    },
    GetProductCategoriesForSKU: function(props) {
      return new ProductsRequest('GetProductCategoriesForSKU', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        SellerSKU: {
          name: 'SellerSKU',
          required: true
        }
      });
    },
    GetProductCategoriesForASIN: function(props) {
      return new ProductsRequest('GetProductCategoriesForASIN', props, {
        MarketplaceId: {
          name: 'MarketplaceId',
          required: true
        },
        ASIN: {
          name: 'ASIN',
          required: true
        }
      });
    }
  };

  /*
   * Construct a Products API request for using with mws.Client.invoke()
   * 
   * @param {String} action Action parameter of request
   * @param {Object} params Schemas for all supported parameters
   */
  ProductsRequest = class ProductsRequest extends mws.Request {
    constructor(action, props = {}, params = {}) {
      super({
        name: 'Products',
        group: 'Products',
        path: '/Products/2011-10-01',
        version: '2011-10-01',
        action: action,
        params: params,
        props: props
      });
    }

  };

}).call(this);
